<-------Bus Class------------------->

class Bus {
    private final boolean[] seats;
    
    public Bus(int numSeats) {
        seats = new boolean[numSeats]; // false means available
    }
    
    public synchronized boolean bookSeat(int seatNumber) {
        if (seatNumber < 0 || seatNumber >= seats.length) {
            System.out.println("Invalid seat number: " + seatNumber);
            return false;
        }
        
        if (!seats[seatNumber]) {
            seats[seatNumber] = true;
            System.out.println(Thread.currentThread().getName() + " booked seat: " + seatNumber);
            return true;
        } else {
            System.out.println(Thread.currentThread().getName() + " failed to book seat: " + seatNumber + " (Already booked)");
            return false;
        }
    }
}

<-------Booking Class------------------->

class Booking implements Runnable {
    private final Bus bus;
    private final int seatNumber;
    
    public Booking(Bus bus, int seatNumber) {
        this.bus = bus;
        this.seatNumber = seatNumber;
    }
    
    @Override
    public void run() {
        bus.bookSeat(seatNumber);
    }
}

<-------Main BusBookingSystem Class------------------->

public class BusBookingSystemTest {
    public static void main(String[] args) {
        int totalSeats = 10;
        Bus bus = new Bus(totalSeats);
        
        Thread[] passengers = new Thread[15]; // More users than seats to test concurrency
        
        for (int i = 0; i < passengers.length; i++) {
            int seatToBook = i % totalSeats; // Attempting to book same seats by multiple threads
            passengers[i] = new Thread(new Booking(bus, seatToBook), "User-" + (i + 1));
        }
        
        for (Thread passenger : passengers) {
            passenger.start();
        }
    }
}
